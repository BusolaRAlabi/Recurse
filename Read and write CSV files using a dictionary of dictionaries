"""
Project for Week 3 of "Python Data Analysis".
Read and write CSV files using a dictionary of dictionaries.

Be sure to read the project description page for further information
about the expected behavior of the program.
"""

import csv

def read_csv_fieldnames(filename, separator, quote):
    """
    Inputs:
      filename  - name of CSV file
      separator - character that separates fields
      quote     - character used to optionally quote fields
    Ouput:
      A list of strings corresponding to the field names in
      the given CSV file.
    """
    
    with open(filename, newline='') as csvfile:     #open file                      
        file = csv.DictReader(csvfile, delimiter=separator, quotechar=quote) #reads csv file with dictreader and specifes csv file delimter and quote 
        return file.fieldnames
    

def read_csv_as_list_dict(filename, separator, quote):
    """
    Inputs:
      filename  - name of CSV file
      separator - character that separates fields
      quote     - character used to optionally quote fields
    Output:
      Returns a list of dictionaries where each item in the list
      corresponds to a row in the CSV file.  The dictionaries in the
      list map the field names to the field values for that row.
    """
    list_of_dict = []                        #initializes list to store dictionary
    with open(filename, newline='') as csvfile:
        file = csv.DictReader(csvfile, delimiter=separator, quotechar=quote)
        for row in file:#iterates through row
            list_of_dict.append(row) #appends row and fieldnames to list
        return list_of_dict
        



def read_csv_as_nested_dict(filename, keyfield, separator, quote):
    """
    Inputs:
      filename  - name of CSV file
      keyfield  - field to use as key for rows
      separator - character that separates fields
      quote     - character used to optionally quote fields
    Output:
      Returns a dictionary of dictionaries where the outer dictionary
      maps the value in the key_field to the corresponding row in the
      CSV file.  The inner dictionaries map the field names to the
      field values for that row.
    """
    
    dict_of_dict = {}
    with open(filename, newline='') as csvfile:
        fileest = csv.DictReader(csvfile, fieldnames=None, delimiter=separator, quotechar=quote) #etting fieldnames to none means it'll use first column as fieldnames or akes the name of that header column as the input keyfield
        for row in fileest: #iterates through rows
            dict_of_dict[row[keyfield]] = row  #now each row is a dict of dict where  the value returned to dict_of_dict is row indexed by keyfield or The inner dictionaries within the outer dictionary map the field names to the column values for that row
        return dict_of_dict

def write_csv_from_list_dict(filename, table, fieldnames, separator, quote):
    """
    Inputs:
      filename   - name of CSV file
      table      - list of dictionaries containing the table to write
      fieldnames - list of strings corresponding to the field names in order
      separator  - character that separates fields
      quote      - character used to optionally quote fields
    Output:
      Writes the table to a CSV file with the name filename, using the
      given fieldnames.  The CSV file should use the given separator and
      quote characters.  All non-numeric fields will be quoted.
    """  
    file_to_read_from = table 
    with open(filename, 'w', newline='') as csv_file:          
        new_file = csv.DictWriter(csv_file, fieldnames=fieldnames, delimiter=separator, quotechar=quote, quoting=csv.QUOTE_NONNUMERIC)
        new_file.writeheader()
        for row in file_to_read_from:
            new_file.writerow(row)

